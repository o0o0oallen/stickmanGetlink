[1,["bd85JaqnpJ87gh1jYEsYQ8"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,3]],[[[[0,"Spine纯色扩边",[{"hash":4162894212,"record":null,"name":"Spine纯色扩边|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform ubo {\n  vec4 selfRect;\n  vec4 color;\n};\nvec4 getColor(vec2 uv) {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  return texColor;\n}\nvoid main () {\n  vec4 texColor = getColor(v_uv0);\n  vec2 offset = 3.8 / selfRect.zw;\n  texColor += getColor(v_uv0 + vec2(offset.x, 0.0)) + getColor(v_uv0 - vec2(offset.x, 0.0)) + getColor(v_uv0 + vec2(0.0 + offset.y)) + getColor(v_uv0 - vec2(0.0 + offset.y));\n  offset = 2.4 / selfRect.zw;\n  texColor += getColor(v_uv0 + vec2(offset.x, 0.0)) + getColor(v_uv0 - vec2(offset.x, 0.0)) + getColor(v_uv0 + vec2(0.0 + offset.y)) + getColor(v_uv0 - vec2(0.0 + offset.y));\n  texColor *= v_light;\n  texColor.rgb = color.rgb;\n  texColor.a *= color.a;\n  gl_FragColor = texColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 selfRect;\nuniform vec4 color;\nvec4 getColor(vec2 uv) {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  return texColor;\n}\nvoid main () {\n  vec4 texColor = getColor(v_uv0);\n  vec2 offset = 3.8 / selfRect.zw;\n  texColor += getColor(v_uv0 + vec2(offset.x, 0.0)) + getColor(v_uv0 - vec2(offset.x, 0.0)) + getColor(v_uv0 + vec2(0.0 + offset.y)) + getColor(v_uv0 - vec2(0.0 + offset.y));\n  offset = 2.4 / selfRect.zw;\n  texColor += getColor(v_uv0 + vec2(offset.x, 0.0)) + getColor(v_uv0 - vec2(offset.x, 0.0)) + getColor(v_uv0 + vec2(0.0 + offset.y)) + getColor(v_uv0 - vec2(0.0 + offset.y));\n  texColor *= v_light;\n  texColor.rgb = color.rgb;\n  texColor.a *= color.a;\n  gl_FragColor = texColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ubo","binding":1,"members":[{"name":"selfRect","type":16,"count":1},{"name":"color","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"Spine纯色扩边|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"selfRect":{"type":16,"value":[0,0,2048,2048]},"color":{"type":16,"value":[1,1,0,1],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[[1,"Spine纯色扩边",{"0":{"defines":{}}}]],0,0,[0],[0],[0]]]]